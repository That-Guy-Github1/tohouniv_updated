#gold
#power
th_update_gain_modifier = {
	set_variable = {
		which = th_danmaku_$type$_gain_show
		which = th_danmaku_$type$_gain
	}
	multiply_variable = {
		which = th_danmaku_$type$_gain_show
		value = 100
	}
}


th_set_danmaku_ruler = {
	th_set_default_danmaku_stats = yes
	th_set_danmaku_ruler_$who$ = yes
	set_ruler_flag = th_danmaku_ruler_is_set
}

th_add_experience_variable = {
	if = {
		limit = { NOT = { check_variable = { which = th_ruler_danmaku_level which = th_danmaku_default_max_level } } }
		custom_tooltip = th_add_experience_tt
		hidden_effect = {
			change_variable = {
				which = th_danmaku_current_exp
				which = $input$
			}
			th_gui_update_exp_bar = yes
			while = {
				limit = { check_variable = { which = th_danmaku_current_exp which = th_danmaku_exp_threshold } }
				th_level_up = yes
			}
		}
	}
}

th_add_experience_value = {
	if = {
		limit = { NOT = { check_variable = { which = th_ruler_danmaku_level which = th_danmaku_default_max_level } } }
		custom_tooltip = th_add_experience_tt
		hidden_effect = {
			change_variable = {
				which = th_danmaku_current_exp
				value = $input$
			}
			th_gui_update_exp_bar = yes
			while = {
				limit = { check_variable = { which = th_danmaku_current_exp which = th_danmaku_exp_threshold } }
				th_level_up = yes
			}
		}
	}
}

th_add_experience = {
	th_add_experience_$type$ = { input = $value$ }
}

th_level_up = {
	if = {
		limit = { NOT = { check_variable = { which = th_ruler_danmaku_level which = th_danmaku_default_max_level } } }
		custom_tooltip = th_level_up_tt
		hidden_effect = {
			play_sound = th_level_up
			change_variable = {
				which = th_ruler_danmaku_level
				value = 1
			}
			if = {
				limit = { NOT = { check_variable = { which = th_ruler_danmaku_level which = th_danmaku_default_max_level } } }
				subtract_variable = {
					which = th_danmaku_current_exp
					which = th_danmaku_exp_threshold
				}
				1 = {
					set_variable = {
						which = th_danmaku_default_skill_points_per_level_transfer
						which = th_danmaku_default_skill_points_per_level
					}
					set_variable = {
						which = th_danmaku_default_exp_increase_transfer
						which = th_danmaku_default_exp_increase
					}
					PREV = {
						set_variable = {
							which = th_danmaku_default_skill_points_per_level_transfer
							which = PREV
						}
						set_variable = {
							which = th_danmaku_default_exp_increase_transfer
							which = PREV
						}
					}
				}
				change_variable = {
					which = th_danmaku_available_skill_points
					which = th_danmaku_default_skill_points_per_level_transfer
				}
				#set_variable = {
				#	which = th_danmaku_exp_threshold_old
				#	which = th_danmaku_exp_threshold
				#}
				change_variable = {
					which = th_danmaku_exp_threshold
					which = th_danmaku_default_exp_increase_transfer
				}
				#change_variable = {
				#	which = th_danmaku_exp_threshold
				#	which = th_danmaku_exp_threshold_old
				#}
			}
			else = {
				set_variable = {
					which = th_danmaku_current_exp
					value = 1
				}
				set_variable = {
					which = th_danmaku_exp_threshold
					value = 1
				}
				set_ruler_flag = th_reached_max_level
			}
			th_gui_update_exp_bar = yes
		}
	}
}


th_monthly_country_danmaku_duel_update = {
	if = {
		limit = { th_is_not_in_a_danmaku_duel = yes }
		#Health regeneration
		change_variable = { which = th_danmaku_health which = th_danmaku_hpm }
		if = {
			limit = { check_variable = { which = th_danmaku_health which = th_danmaku_max_health } }
			set_variable = { which = th_danmaku_health which = th_danmaku_max_health }
		}
		if = {
			limit = { NOT = { check_variable = { which = th_danmaku_health value = 0 } } }
			set_variable = { which = th_danmaku_health value = 0 }
		}
		th_gui_update_danmaku_bar = { type = health }
		#Mana regeneration
		change_variable = { which = th_danmaku_mana which = th_danmaku_mpm }
		if = {
			limit = { check_variable = { which = th_danmaku_mana which = th_danmaku_max_mana } }
			set_variable = { which = th_danmaku_mana which = th_danmaku_max_mana }
		}
		if = {
			limit = { NOT = { check_variable = { which = th_danmaku_mana value = 0 } } }
			set_variable = { which = th_danmaku_mana value = 0 }
		}
		th_gui_update_danmaku_bar = { type = mana }
	}
	if = {
		limit = { th_is_duelling_an_unlanded_character = yes }
		th_monthly_danmaku_duel_unlanded_duration_reduction = yes
	}
}


th_define_exp_reward_base = {
	1 = {
		set_variable = {
			which = th_danmaku_default_exp_reward_base_transfer
			which = th_danmaku_default_exp_reward_base
		}
		set_variable = {
			which = th_danmaku_default_exp_scale_transfer
			which = th_danmaku_default_exp_scale
		}
		PREV = {
			set_variable = {
				which = th_danmaku_default_exp_reward_base_transfer
				which = PREV
			}
			set_variable = {
				which = th_danmaku_default_exp_scale_transfer
				which = PREV
			}
		}
	}
	set_variable = {
		which = th_total_exp_gain
		which = th_danmaku_default_exp_reward_base_transfer
	}
	if = {
		limit = { th_is_duelling_an_unlanded_character = yes }
		set_variable = {
			which = th_ruler_danmaku_level_transfer
			which = th_enemy_character_level
		}
	}
	else = {
		event_target:enemy_duelist = {
			set_variable = {
				which = th_ruler_danmaku_level_transfer
				which = th_ruler_danmaku_level
			}
			PREV = {
				set_variable = {
					which = th_ruler_danmaku_level_transfer
					which = PREV
				}
			}
		}
	}
	multiply_variable = {
		which = th_danmaku_default_exp_scale_transfer
		which = th_ruler_danmaku_level_transfer
	}
	change_variable = {
		which = th_total_exp_gain
		which = th_danmaku_default_exp_scale_transfer
	}
}
th_define_exp_reward_win = {
	th_define_exp_reward_base = yes
	1 = {
		set_variable = {
			which = th_danmaku_default_exp_reward_win_transfer
			which = th_danmaku_default_exp_reward_win
		}
		set_variable = {
			which = th_danmaku_default_exp_win_modifier_transfer
			which = th_danmaku_default_exp_win_modifier
		}
		PREV = {
			set_variable = {
				which = th_danmaku_default_exp_reward_win_transfer
				which = PREV
			}
			set_variable = {
				which = th_danmaku_default_exp_win_modifier_transfer
				which = PREV
			}
		}
	}
	change_variable = {
		which = th_total_exp_gain
		which = th_danmaku_default_exp_reward_win
	}
	multiply_variable = {
		which = th_danmaku_default_exp_reward_win_transfer
		which = th_ruler_danmaku_level_transfer
	}
	change_variable = {
		which = th_total_exp_gain
		which = th_danmaku_default_exp_reward_win_transfer
	}
}
th_define_exp_reward = {
	if = {
		limit = { NOT = { check_variable = { which = th_ruler_danmaku_level which = th_danmaku_default_max_level } } }
		th_define_exp_reward_$type$ = yes
	}
}

th_define_danmaku_gold_reward = {
	if = {
		limit = { 1 = { check_variable = { which = th_danmaku_default_gold_gain_activated value = 1 } } }
		1 = {
			set_variable = {
				which = th_danmaku_base_gold_reward_transfer
				which = th_danmaku_default_gold_reward_base
			}
			if = {
				limit = { check_variable = { which = th_danmaku_default_gold_reward_scale_active value = 1 } }
				set_variable = {
					which = th_danmaku_scale_gold_reward_transfer
					which = th_danmaku_default_gold_reward_scale
				}
			}
			else = {
				set_variable = {
					which = th_danmaku_scale_gold_reward_transfer
					value = 0
				}
			}
			PREV = {
				set_variable = {
					which = th_danmaku_base_gold_reward_transfer
					which = PREV
				}
				set_variable = {
					which = th_danmaku_scale_gold_reward_transfer
					which = PREV
				}
			}
		}
		set_variable = {
			which = th_total_gold_gain
			which = th_danmaku_base_gold_reward_transfer
		}
		if = {
			limit = { th_is_duelling_an_unlanded_character = yes }
			set_variable = {
				which = th_ruler_danmaku_level_transfer
				which = th_enemy_character_level
			}
		}
		else = {
			event_target:enemy_duelist = {
				set_variable = {
					which = th_ruler_danmaku_level_transfer
					which = th_ruler_danmaku_level
				}
				PREV = {
					set_variable = {
						which = th_ruler_danmaku_level_transfer
						which = PREV
					}
				}
			}
		}
		multiply_variable = {
			which = th_danmaku_scale_gold_reward_transfer
			which = th_ruler_danmaku_level_transfer
		}
		change_variable = {
			which = th_total_gold_gain
			which = th_danmaku_scale_gold_reward_transfer
		}
		set_variable = {
			which = th_gold_gain_modifier
			which = th_danmaku_gold_gain
		}
		change_variable = {
			which = th_gold_gain_modifier
			value = 1
		}
		multiply_variable = {
			which = th_total_gold_gain
			which = th_gold_gain_modifier
		}
	}
}

th_define_danmaku_power_reward = {
	if = {
		limit = { 1 = { check_variable = { which = th_danmaku_default_power_gain_activated value = 1 } } }
		1 = {
			set_variable = {
				which = th_danmaku_base_power_reward_transfer
				which = th_danmaku_default_power_reward_base
			}
			if = {
				limit = { check_variable = { which = th_danmaku_default_power_reward_scale_active value = 1 } }
				set_variable = {
					which = th_danmaku_scale_power_reward_transfer
					which = th_danmaku_default_power_reward_scale
				}
			}
			else = {
				set_variable = {
					which = th_danmaku_scale_power_reward_transfer
					value = 0
				}
			}
			PREV = {
				set_variable = {
					which = th_danmaku_base_power_reward_transfer
					which = PREV
				}
				set_variable = {
					which = th_danmaku_scale_power_reward_transfer
					which = PREV
				}
			}
		}
		set_variable = {
			which = th_total_power_gain
			which = th_danmaku_base_power_reward_transfer
		}
		if = {
			limit = { th_is_duelling_an_unlanded_character = yes }
			set_variable = {
				which = th_ruler_danmaku_level_transfer
				which = th_enemy_character_level
			}
		}
		else = {
			event_target:enemy_duelist = {
				set_variable = {
					which = th_ruler_danmaku_level_transfer
					which = th_ruler_danmaku_level
				}
				PREV = {
					set_variable = {
						which = th_ruler_danmaku_level_transfer
						which = PREV
					}
				}
			}
		}
		multiply_variable = {
			which = th_danmaku_scale_power_reward_transfer
			which = th_ruler_danmaku_level_transfer
		}
		change_variable = {
			which = th_total_power_gain
			which = th_danmaku_scale_power_reward_transfer
		}
		set_variable = {
			which = th_power_gain_modifier
			which = th_danmaku_power_gain
		}
		change_variable = {
			which = th_power_gain_modifier
			value = 1
		}
		multiply_variable = {
			which = th_total_power_gain
			which = th_power_gain_modifier
		}
		if = {
			limit = { 1 = { is_variable_equal = { which = th_danmaku_default_power_type value = 4 } } }
			set_country_flag = th_danmaku_power_reward_all
		}
		else_if = {
			limit = { 1 = { is_variable_equal = { which = th_danmaku_default_power_type value = 3 } } }
			set_country_flag = th_danmaku_power_reward_mil
		}
		else_if = {
			limit = { 1 = { is_variable_equal = { which = th_danmaku_default_power_type value = 2 } } }
			set_country_flag = th_danmaku_power_reward_dip
		}
		else_if = {
			limit = { 1 = { is_variable_equal = { which = th_danmaku_default_power_type value = 1 } } }
			set_country_flag = th_danmaku_power_reward_adm
		}
		else = {
			set_country_flag = th_danmaku_power_reward_random
			set_variable = {
				which = th_rng_roll
				value = 0
			}
			th_roll_die_no_variable = {
				die_type = 3
				die_amount = 1
				bonus_per_roll = 0
				result = th_rng_roll
			}
			if = {
				limit = { is_variable_equal = { which = th_rng_roll value = 1 } }
				set_country_flag = th_rng_rolled_adm
			}
			else_if = {
				limit = { is_variable_equal = { which = th_rng_roll value = 2 } }
				set_country_flag = th_rng_rolled_dip
			}
			else = {
				set_country_flag = th_rng_rolled_mil
			}
		}
	}
}

# gold
# power
# exp
th_reward_multiplier = {
	multiply_variable = {
		which = th_total_$type$_gain
		value = $factor$
	}
}

#Suppoorts:
# victory
# draw
th_add_danmaku_exp_reward = {
	if = {
		limit = { NOT = { check_variable = { which = th_ruler_danmaku_level which = th_danmaku_default_max_level } } }
		custom_tooltip = th_add_danmaku_exp_reward_$type$_tt
		hidden_effect = {
			th_add_experience = { type = variable value = th_total_exp_gain }
		}
	}
}
th_add_danmaku_gold_reward = {
	if = {
		limit = { 1 = { check_variable = { which = th_danmaku_default_gold_gain_activated value = 1 } } }
		custom_tooltip = th_add_danmaku_gold_reward_$type$_tt
		hidden_effect = {
			while = {
				limit = { check_variable = { which = th_total_gold_gain value = 1 } }
				add_treasury = 1
				subtract_variable = { which = th_total_gold_gain value = 1 }
			}
			multiply_variable = { which = th_total_gold_gain value = 100 }
			while = {
				limit = { check_variable = { which = th_total_gold_gain value = 1 } }
				add_treasury = 0.01
				subtract_variable = { which = th_total_gold_gain value = 1 }
			}
		}
	}
}
th_add_danmaku_power_reward = {
	if = {
		limit = { 1 = { check_variable = { which = th_danmaku_default_power_gain_activated value = 1 } } }
		if = { limit = { has_country_flag = th_danmaku_power_reward_all } custom_tooltip = th_add_danmaku_all_power_reward_$type$_tt }
		if = { limit = { OR = { has_country_flag = th_danmaku_power_reward_adm has_country_flag = th_rng_rolled_adm } } custom_tooltip = th_add_danmaku_adm_power_reward_$type$_tt }
		if = { limit = { OR = { has_country_flag = th_danmaku_power_reward_dip has_country_flag = th_rng_rolled_dip } } custom_tooltip = th_add_danmaku_dip_power_reward_$type$_tt }
		if = { limit = { OR = { has_country_flag = th_danmaku_power_reward_mil has_country_flag = th_rng_rolled_mil } } custom_tooltip = th_add_danmaku_mil_power_reward_$type$_tt }
		hidden_effect = {
			while = {
				limit = { check_variable = { which = th_total_power_gain value = 1 } }
				trigger_switch = {
					on_trigger = has_country_flag
					th_danmaku_power_reward_all = {
						add_adm_power = 1 add_dip_power = 1 add_mil_power = 1
					}
					th_danmaku_power_reward_adm = { add_adm_power = 1 }
					th_danmaku_power_reward_dip = { add_dip_power = 1 }
					th_danmaku_power_reward_mil = { add_mil_power = 1 }
					th_danmaku_power_reward_random = {
						trigger_switch = {
							on_trigger = has_country_flag
							th_rng_rolled_adm = { add_adm_power = 1 }
							th_rng_rolled_dip = { add_dip_power = 1 }
							th_rng_rolled_mil = { add_mil_power = 1 }
						}
					}
				}
				subtract_variable = { which = th_total_power_gain value = 1 }
			}
			clr_country_flag = th_danmaku_power_reward_all
			clr_country_flag = th_danmaku_power_reward_mil
			clr_country_flag = th_danmaku_power_reward_dip
			clr_country_flag = th_danmaku_power_reward_adm
			clr_country_flag = th_danmaku_power_reward_random
			clr_country_flag = th_rng_rolled_adm
			clr_country_flag = th_rng_rolled_dip
			clr_country_flag = th_rng_rolled_mil
		}
	}
}

th_danmaku_lose_effect = {
	if = {
		limit = { 1 = { check_variable = { which = th_danmaku_default_setting_ruler_death value = 1 } } }
		kill_ruler = yes
	}
	else = {
		add_ruler_modifier = {
			name = th_danmaku_incapacitated
			duration = 730
		}
		custom_tooltip = th_danmaku_incapacitated_tt
		th_add_danmaku_exp_reward = { type = defeat }
	}
}

th_copy_attack_type_and_school_from_weapon = {
	hidden_effect = {
		1 = {
			set_variable = {
				which = th_danmaku_attack_type
				which = th_weapon_$weapon$_damage_type
			}
			set_variable = {
				which = th_danmaku_attack_school
				which = th_weapon_$weapon$_damage_school
			}
			PREV = {
				set_variable = {
					which = th_danmaku_attack_type
					which = PREV
				}
				set_variable = {
					which = th_danmaku_attack_school
					which = PREV
				}
			}
		}
	}
}
th_copy_attack_type_and_school_from_weapon_enemy_character = {
	hidden_effect = {
		1 = {
			set_variable = {
				which = th_enemy_character_damage_type
				which = th_weapon_$weapon$_damage_type
			}
			set_variable = {
				which = th_enemy_character_damage_school
				which = th_weapon_$weapon$_damage_school
			}
			PREV = {
				set_variable = {
					which = th_enemy_character_damage_type
					which = PREV
				}
				set_variable = {
					which = th_enemy_character_damage_school
					which = PREV
				}
			}
		}
	}
}

th_apply_weapon_stats_on_ruler = {
	[[physical_attack_bonus]set_variable = { 						which = th_danmaku_physical_attack_bonus 					value = $physical_attack_bonus$ }]
	[[physical_attack_die]set_variable = { 							which = th_danmaku_physical_attack_die 						value = $physical_attack_die$ }]
	[[physical_attack_die_num]set_variable = { 						which = th_danmaku_physical_attack_die_num 					value = $physical_attack_die_num$ }]
	[[physical_crit_roll_needed]set_variable = { 					which = th_danmaku_physical_crit_roll_needed 				value = $physical_crit_roll_needed$ }]
	[[physical_crit_roll_damage_multiplier]set_variable = { 		which = th_danmaku_physical_crit_roll_damage_multiplier 	value = $physical_crit_roll_damage_multiplier$ }]
	[[magical_attack_bonus]set_variable = { 						which = th_danmaku_magical_attack_bonus 					value = $magical_attack_bonus$ }]
	[[magical_attack_die]set_variable = { 							which = th_danmaku_magical_attack_die 						value = $magical_attack_die$ }]
	[[magical_attack_die_num]set_variable = { 						which = th_danmaku_magical_attack_die_num 					value = $magical_attack_die_num$ }]
	[[magical_crit_roll_needed]set_variable = { 					which = th_danmaku_magical_crit_roll_needed 				value = $magical_crit_roll_needed$ }]
	[[magical_crit_roll_damage_multiplier]set_variable = { 			which = th_danmaku_magical_crit_roll_damage_multiplier 		value = $magical_crit_roll_damage_multiplier$ }]
	[[psionic_attack_bonus]set_variable = { 						which = th_danmaku_psionic_attack_bonus 					value = $psionic_attack_bonus$ }]
	[[psionic_attack_die]set_variable = { 							which = th_danmaku_psionic_attack_die 						value = $psionic_attack_die$ }]
	[[psionic_attack_die_num]set_variable = { 						which = th_danmaku_psionic_attack_die_num 					value = $psionic_attack_die_num$ }]
	[[psionic_crit_roll_needed]set_variable = { 					which = th_danmaku_psionic_crit_roll_needed 				value = $psionic_crit_roll_needed$ }]
	[[psionic_crit_roll_damage_multiplier]set_variable = { 			which = th_danmaku_psionic_crit_roll_damage_multiplier 		value = $psionic_crit_roll_damage_multiplier$ }]
}
th_apply_weapon_stats_on_unlanded_character = {
	[[physical_attack_bonus]set_variable = { 						which = th_enemy_character_physical_attack_bonus 					value = $physical_attack_bonus$ }]
	[[physical_attack_die]set_variable = { 							which = th_enemy_character_physical_attack_die 						value = $physical_attack_die$ }]
	[[physical_attack_die_num]set_variable = { 						which = th_enemy_character_physical_attack_die_num 					value = $physical_attack_die_num$ }]
	[[physical_crit_roll_needed]set_variable = { 					which = th_enemy_character_physical_crit_roll_needed 				value = $physical_crit_roll_needed$ }]
	[[physical_crit_roll_damage_multiplier]set_variable = { 		which = th_enemy_character_physical_crit_roll_multiplier 			value = $physical_crit_roll_damage_multiplier$ }]
	[[magical_attack_bonus]set_variable = { 						which = th_enemy_character_magical_attack_bonus 					value = $magical_attack_bonus$ }]
	[[magical_attack_die]set_variable = { 							which = th_enemy_character_magical_attack_die 						value = $magical_attack_die$ }]
	[[magical_attack_die_num]set_variable = { 						which = th_enemy_character_magical_attack_die_num 					value = $magical_attack_die_num$ }]
	[[magical_crit_roll_needed]set_variable = { 					which = th_enemy_character_magical_crit_roll_needed 				value = $magical_crit_roll_needed$ }]
	[[magical_crit_roll_damage_multiplier]set_variable = { 			which = th_enemy_character_magical_crit_roll_multiplier 			value = $magical_crit_roll_damage_multiplier$ }]
	[[psionic_attack_bonus]set_variable = { 						which = th_enemy_character_psionic_attack_bonus 					value = $psionic_attack_bonus$ }]
	[[psionic_attack_die]set_variable = { 							which = th_enemy_character_psionic_attack_die 						value = $psionic_attack_die$ }]
	[[psionic_attack_die_num]set_variable = { 						which = th_enemy_character_psionic_attack_die_num 					value = $psionic_attack_die_num$ }]
	[[psionic_crit_roll_needed]set_variable = { 					which = th_enemy_character_psionic_crit_roll_needed 				value = $psionic_crit_roll_needed$ }]
	[[psionic_crit_roll_damage_multiplier]set_variable = { 			which = th_enemy_character_psionic_crit_roll_multiplier 			value = $psionic_crit_roll_damage_multiplier$ }]
}

th_equip_currently_selected_weapon = {
	custom_tooltip = th_equip_currently_selected_weapon_item_tt
	hidden_effect = {
		set_variable = {
			which = th_danmaku_weapon_equipped
			which = th_selected_weapon
		}
		play_sound = th_equip_minor_weapon
		th_get_weapon_attack_and_apply = yes
	}
}

th_get_weapon_attack_and_apply = {
	hidden_effect = {
		#upgraded weapon
		#if = {
		#	limit = { always = no }
		#}
		#else = {
		#	
		#}
		if = {
			limit = { th_has_equipped_any_weapon = yes }
			if = {
				limit = { th_has_equipped_weapon = { weapon = iron_sword } }
				th_apply_default_weapon_stats = { weapon = iron_sword who = ruler }
			}
		}
	}
}