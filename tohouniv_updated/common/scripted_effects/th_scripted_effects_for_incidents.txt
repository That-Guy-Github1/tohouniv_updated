#KEEP
th_incident_initialize_investigator = {
	set_country_flag = th_incident_investigating
	add_country_modifier = {
		name = th_incident_investigator_modifier
		duration = -1
		desc = th_incident_investigator_modifier_tt
	}
	#Now our investigator has his own scope! To call him type "event_target:th_incident_investigator"
	save_global_event_target_as = th_incident_investigator		
}

#If an incident is active for over 25 years, it gets forcefully terminated and a bad ending occurs
th_incident_terminate_current = {
	hidden_effect = {
		clr_global_flag = th_incident_to_terminate
	}
	trigger_switch = {
		on_trigger = has_global_flag
		th_current_incident_scarlet_mists_incident 			= { country_event = { id = th_incidents_scarletmists.100 } }
		th_current_incident_cherry_blossom_incident 		= { country_event = { id = th_incidents_cherryblossom.100 } }
		th_current_incident_eternal_night_incident 			= { country_event = { id = th_incidents_eternalnight.100 } }		#TODO
		th_current_incident_sixty_year_cycle_incident 		= { country_event = { id = th_incidents_mountainoffaith.100 } }
		th_current_incident_mountain_of_faith_incident 		= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_subterranean_animism_incident 	= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_undefined_fantastic_incident 	= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_hisoutensoku_incident 			= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_ten_desires_incident 			= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_hopeless_masquerade_incident 	= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_reversal_incident 				= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_urban_legend_incident 			= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_lunarian_incident 				= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_perfect_possession_incident 	= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_four_seasons_incident 			= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_animal_realm_incident 			= { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
		th_current_incident_unconnected_marketeers_incident = { country_event = { id = th_incidents_scarletmists.100 } }		#TODO
	}
}

#Clear all the previous investigators - use this in the introduction event when nobody wants to investigate
th_incident_clr_previous_investigators = {
	every_known_country = {
		limit = {
			th_incident_is_investigator = yes
		}
		clr_country_flag = th_incident_investigating
		if = {
			limit = {
				has_country_modifier = th_incident_investigator_modifier
			}
			remove_country_modifier = th_incident_investigator_modifier
		}
	}
}

###HKR MISSION EFFECTS ### DO NOT TOUCH###
th_incident_initiate_good_outcome_counter = {
	set_country_flag = hkr_inci_setup
	set_variable = {
		which = th_incident_outcome_counter
		value = 0
	}
}
#########################################

#KEEP
th_incident_set_investigator = {
	th_incident_clr_previous_investigators = yes
	every_country = {
		limit = {
			has_country_flag = th_incident_investigating
		}
		th_incident_clr_previous_investigators = yes
	}
	if = {
		limit = {
			has_country_flag = th_eligible_investigator
			NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
			NOT = {
				any_country = {
					has_country_flag = th_eligible_investigator
				}
			}
		}
		ROOT = {
			th_incident_initialize_investigator = yes			
		}
	}
	else_if = {
		limit = {
			any_country = {
				th_is_major_main_character = yes
				has_country_flag = th_eligible_investigator
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
			}
		}
		random_country = {
			limit = {
				th_is_major_main_character = yes
				has_country_flag = th_eligible_investigator
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
			}
			th_incident_initialize_investigator = yes
		}
	}
	else_if = {
		limit = {
			any_country = {
				th_is_minor_main_character = yes
				has_country_flag = th_eligible_investigator
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
			}
		}
		random_country = {
			limit = {
				th_is_minor_main_character = yes
				has_country_flag = th_eligible_investigator
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
			}
			th_incident_initialize_investigator = yes
		}
	}
	else_if = {
		limit = {
			ai = no
			has_country_flag = th_eligible_investigator
			NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
		}
		ROOT = {
			th_incident_initialize_investigator = yes
		}
	}
	else_if = {
		limit = {
			any_country = {
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
				has_country_flag = th_eligible_investigator
				ai = no
			}
		}
		random_known_country = {
			limit = {
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
				has_country_flag = th_eligible_investigator
				ai = no
			}
			th_incident_initialize_investigator = yes
		}
	}
	else = {
		random_known_country = {
			limit = {
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
				has_country_flag = th_eligible_investigator
			}
			th_incident_initialize_investigator = yes
		}
	}

	if = {
		limit = {
			has_global_flag = th_incident_introduced
		}
		country_event = {
			id = th_incidents_event.12
			days = 1
		}
	}
}

#KEEP
th_incident_forbid_country_to_investigate = {
	every_country = {
		limit = {
			OR = { tag = $who$ was_tag = $who$ }
		}
		clr_country_flag = th_eligible_investigator
		set_country_flag = th_is_not_valid_for_investiagtor_role
	}
}

#KEEP
th_incident_setup_investigator = {
	if = {	#Player always becomes investigator if the choice is biased
		limit = {
			has_global_flag = th_biased_incident_active
			NOT = { tag = HKR }
			NOT = { was_tag = HKR }
		}
		th_incident_initialize_investigator = yes
	}
	else_if = {	#HKR always becomes investigator
		limit = {
			OR = {
				tag = HKR
				was_tag = HKR
			}
		}
		th_incident_initialize_investigator = yes
	}
	else_if = {	#FOM becomes investigator, whe HKR doesn't exist. Else HKR investigates
		limit = {
			OR = {
				tag = FOM
				was_tag = FOM
			}
		}
		if = {
			limit = {
				exists = HKR
				HKR = {
					has_country_flag = th_eligible_investigator
				}
			}
			every_country = {
				limit = {
					has_country_flag = th_incident_investigating
				}
				th_incident_clr_previous_investigators = yes
			}
			HKR = {
				th_incident_initialize_investigator = yes
			}
		}
		else = {
			th_incident_initialize_investigator = yes
		}
	}
	else_if = {	#MRY becomes investigator, when HKR and FOM are not aviable
		limit = { 
			OR = {
				tag = MRY
				was_tag = MRY
			}
		}
		if = {
			limit = {
				exists = HKR
				HKR = {
					has_country_flag = th_eligible_investigator
				}
			}
			every_country = {
				limit = {
					has_country_flag = th_incident_investigating
				}
				th_incident_clr_previous_investigators = yes
			}
			HKR = {
				th_incident_initialize_investigator = yes
			}
		}
		else_if = {
			limit = { 
				exists = FOM
				FOM = {
					has_country_flag = th_eligible_investigator
				}
			}
			every_country = {
				limit = {
					has_country_flag = th_incident_investigating
				}
				th_incident_clr_previous_investigators = yes
			}
			FOM = {
				th_incident_initialize_investigator = yes
			}
		}
		else = {
			th_incident_initialize_investigator = yes
		}
	}
	else_if = {	#SCR and NET shares the same priority
		limit = { 
			OR = {
				tag = NET
				tag = SCR
				tag = SCD
				tag = NMG
				was_tag = NET
				was_tag = SCR
			}
		}
		if = {
			limit = {
				exists = HKR
				HKR = {
					has_country_flag = th_eligible_investigator
				}
			}
			every_country = {
				limit = {
					has_country_flag = th_incident_investigating
				}
				th_incident_clr_previous_investigators = yes
			}
			HKR = {
				th_incident_initialize_investigator = yes
			}
		}
		else_if = {
			limit = { 
				exists = FOM
				FOM = {
					has_country_flag = th_eligible_investigator
				}
			}
			every_country = {
				limit = {
					has_country_flag = th_incident_investigating
				}
				th_incident_clr_previous_investigators = yes
			}
			FOM = {
				th_incident_initialize_investigator = yes
			}
		}
		else_if = {
			limit = { 
				exists = MRY
				MRY = {
					has_country_flag = th_eligible_investigator
				}
			}
			every_country = {
				limit = {
					has_country_flag = th_incident_investigating
				}
				th_incident_clr_previous_investigators = yes
			}
			MRY = {
				th_incident_initialize_investigator = yes
			}
		}
	}
	else = {
		th_incident_set_investigator = yes
	}
}

#KEEP
th_incident_introduction_event = {
	if = {
		limit = {
			NOT = { has_global_flag = th_incident_introduced }	
		}
		every_country = {
			limit = {
				capital_scope = {
					superregion = gensokyo_superregion
				}				
			}
			country_event = {
				id = $id$
				days = 1
			}
		}
		hidden_effect = {					
			set_global_flag = th_incident_introduced
		}
	}
}

###CLEANUP###
th_incident_clear_all_limited_flags = {	
	clr_global_flag = th_incident_introduced
	clr_global_flag = th_minor_player_asked
	th_incident_clr_previous_investigators = yes
	clr_country_flag = th_current_incident_$incident$
	clr_country_flag = th_incident_last_fight_won
	clr_country_flag = th_incident_last_fight_lost
	clr_country_flag = th_incident_last_fight_terribly_lost
	clr_country_flag = th_eligible_investigator
	clr_country_flag = th_is_not_valid_for_investiagtor_role
	clr_country_flag = th_refused_investigator
	clr_country_flag = th_incident_random_player_investigator
	every_country = {
		limit = {
			OR = {
				has_country_flag = th_incident_investigating
				has_country_flag = th_incident_last_fight_won
				has_country_flag = th_incident_last_fight_lost
				has_country_flag = th_incident_last_fight_terribly_lost
				has_country_flag = th_eligible_investigator
				has_country_flag = th_is_not_valid_for_investiagtor_role
				has_country_flag = th_refused_investigator
				has_country_flag = th_incident_random_player_investigator
			}
		}
		th_incident_clr_previous_investigators = yes
		clr_country_flag = th_incident_last_fight_won
		clr_country_flag = th_incident_last_fight_lost
		clr_country_flag = th_incident_last_fight_terribly_lost
		clr_country_flag = th_eligible_investigator
		clr_country_flag = th_is_not_valid_for_investiagtor_role
		clr_country_flag = th_refused_investigator
		clr_country_flag = th_incident_random_player_investigator
	}
	every_province = {
		limit = {
			has_province_flag = th_first_clean_dummy
		}
		clr_province_flag = th_first_clean_dummy
	}
	every_province = {
		limit = {
			has_province_flag = th_second_clean_dummy
		}
		clr_province_flag = th_second_clean_dummy
	}
}

#Remove incident specific stuff
th_remove_incident_specific_modifiers = {
	[[scarlet_mists_incident]
		every_province = {
			limit = { has_province_modifier = th_plagued_by_the_scarlet_mist }
			remove_province_modifier = th_plagued_by_the_scarlet_mist
		}
	]
	[[cherry_blossom_incident]
		every_province = {
			limit = {
				OR = {
					has_province_modifier = th_PCB_hard_winter
					has_province_modifier = th_PCB_howling_winds
					has_province_modifier = th_PCB_frozen_land
					has_province_modifier = th_PCB_permanent_blizzard
					has_province_modifier = th_PCB_endless_winter
				}
			}
			remove_province_modifier = th_PCB_hard_winter
			remove_province_modifier = th_PCB_howling_winds
			remove_province_modifier = th_PCB_frozen_land
			remove_province_modifier = th_PCB_permanent_blizzard
			remove_province_modifier = th_PCB_endless_winter
			remove_province_modifier = th_PCB_locals_take_a_rest
			remove_province_modifier = th_PCB_locals_are_freezing
			remove_province_modifier = th_PCB_locals_are_used_to_freezing_to_death
			remove_province_modifier = th_PCB_abandon_province
			remove_province_modifier = th_PCB_great_fire
			remove_province_modifier = th_PCB_people_holding_together
		}
	]
	[[eternal_night_incident]
		every_country = {
			limit = {
				OR = {
					has_country_flag = th_EN_had_recent_youkai_risen_up_flag
					has_country_flag = th_EN_has_rising_youkai_flag
					has_country_flag = th_EN_had_recent_youkai_unrest_flag
				}
			}
			clr_country_flag = th_EN_had_recent_youkai_risen_up_flag
			clr_country_flag = th_EN_has_rising_youkai_flag
			clr_country_flag = th_EN_had_recent_youkai_unrest_flag
		}
		clr_global_flag = th_EN_inci_lengthened_night
		every_province = {
			limit = {
				has_province_modifier = th_EN_unrested_youkais
			}
			remove_province_modifier = th_EN_unrested_youkais
		}
		every_country = {
			limit = {
				capital_scope = {
					th_gensokyo_or_moon_continent = yes
				}
			}
			disband_rebels = th_youkai_rebels
		}
	]
	[[sixty_year_cycle_incident]

	]
	[[mountain_of_faith_incident]
		every_province = {
			limit = {
				OR = {
					has_province_flag = th_religious_zeal_event_happend
				}
			}
			clr_province_flag = th_religious_zeal_event_happend
		}
	]
	[[subterranean_animism_incident]

	]
	[[undefined_fantastic_incident]

	]
	[[hisoutensoku_incident]

	]
	[[ten_desires_incident]

	]
	[[hopeless_masquerade_incident]

	]
	[[reversal_incident]

	]
	[[urban_legend_incident]

	]
	[[lunarian_incident]

	]
	[[perfect_possession_incident]

	]
	[[four_seasons_incident]

	]
	[[animal_realm_incident]

	]
	[[unconnected_marketeers_incident]

	]
}

#Gets called with the flag remover as they happen after each incident
th_set_incident_cooldown = {
	clr_global_flag = th_recently_solved_incident_flag
	set_global_flag = th_recently_solved_incident_flag
}

#Solve incident
#Supports following incidents:
# scarlet_mists_incident			EoSD
# cherry_blossom_incident			PCB
# eternal_night_incident			IN
# sixty_year_cycle_incident			PoFV
# mountain_of_faith_incident		MoF
# subterranean_animism_incident		SA
# undefined_fantastic_incident		UFO
# hisoutensoku_incident				His (minor)
# ten_desires_incident				TD
# hopeless_masquerade_incident		HM (minor)
# reversal_incident					DDC
# urban_legend_incident				ULL (minor)
# lunarian_incident					LoLK
# perfect_possession_incident		AoCF (minor)
# four_seasons_incident				HSFS
# animal_realm_incident				WBWC
# unconnected_marketeers_incident	UM
th_resolve_incident = {
	custom_tooltip = th_solve_$incident$_tt
	hidden_effect = {
		set_global_flag = th_$incident$_solved
		clr_global_flag = th_active_incident
		clr_global_flag = th_incident_to_terminate
	}
}

#The country flag for the investigator for solving an incident
th_solve_incident = {
	custom_tooltip = th_solve_$incident$_tt
	hidden_effect = {
		set_country_flag = th_has_solved_$incident$
		if = {
			limit = { NOT = { has_country_flag = th_solved_incident } }
			set_country_flag = th_solved_incident
		}
		if = {
			limit = { has_country_flag = hkr_inci_setup }
			change_variable = {
				which = th_incident_outcome_counter
				value = 1
			}
		}
	}
}
th_solve_incident_extra = {
	custom_tooltip = th_solve_$incident$_extra_tt
	hidden_effect = {
		set_country_flag = th_has_solved_$incident$_extra
	}
}

#The great effect which sets up the general incident
#Use this effect after declaring the countries, which cannot investigate
th_start_incident_effect = {
	every_country = {
		limit = {
			capital_scope = {
				superregion = gensokyo_superregion
			}
			NOT = {	has_country_flag = th_is_not_valid_for_investiagtor_role }
			is_free_or_tributary_trigger = yes
		}
		set_country_flag = th_eligible_investigator
	}
	if = {		
		limit = {
			has_global_flag = th_biased_incident_active
		}
		if = {
			limit = {
				ai = no
				has_country_flag = th_eligible_investigator
				NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
			}
			set_country_flag = th_incident_random_player_investigator
		}
		else = {
			random_country = {
				limit = {
					ai = no
					has_country_flag = th_eligible_investigator
					NOT = { has_country_flag = th_is_not_valid_for_investiagtor_role }
				}
				set_country_flag = th_incident_random_player_investigator
			}
		}
	}
	set_global_flag = th_incident_to_terminate
	set_global_flag = th_active_incident
	clr_global_flag = th_incident_cleaned_all_flags
	set_global_flag = th_current_incident_$incident$
	1 = {
		set_variable = {
			which = th_$incident$_stage
			value = 0
		}
	}
}

#Tooltip
th_start_incident_tooltip = {
	custom_tooltip = th_start_$incident$_tt
}

th_set_incident_stage = {
	1 = {
		set_variable = {
			which = th_$incident$_stage
			value = $stage$
		}
	}
}

th_raise_incident_stage = {
	1 = {
		change_variable = {
			which = th_$incident$_stage
			value = $stage$
		}
	}
}

#Let the investigator progress to the next stage
th_prepare_for_next_stage = {
	if = {
		limit = {			
			th_incident_is_investigator = yes
		}
		clr_country_flag = th_incident_stage_timer
		set_country_flag = th_incident_stage_timer
	}
}

#Effect for the country, who investigates an incident first
th_investigate_incident = {
	custom_tooltip = th_investigate_$incident$_tt
	add_adm_power = -25
	hidden_effect = {
		th_raise_incident_stage = {
			incident = $incident$
			stage = 1
		}
		clr_country_flag = th_incident_stage_timer
		set_country_flag = th_incident_stage_timer
		if = {
			limit = {
				NOT = { has_country_flag = th_incident_had_info }
			}
			country_event = {
				id = th_danmaku_event.1
				days = 1
			}
		}
	}
}

#Effect for a country to be made into a new investigator if the previous investigator dies/refuses
th_incident_set_country_to_new_investigator = {
	custom_tooltip = th_incident_set_country_to_new_investigator.tt
	hidden_effect = {
		every_country = {
			limit = {
				has_country_flag = th_incident_investigating
			}
			clr_country_flag = th_incident_investigating
			if = {
				limit = {
					has_country_modifier = th_incident_investigator_modifier
				}
				remove_country_modifier = th_incident_investigator_modifier
			}
		}
		th_incident_initialize_investigator = yes
		if = {
			limit = {
				NOT = { has_country_flag = th_incident_had_info }
			}
			country_event = {
				id = th_danmaku_event.1
				days = 1
			}
		}
		#Set up the points for the new investigator
		set_variable = {
			which = th_$incident$_points
			value = 0
		}
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 8
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 14
			}
		}
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 7
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 11
			}
		}
		#Normal incidents
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 6
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 9
			}
		}
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 5
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 8
			}
		}
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 4
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 6
			}
		}
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 3
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 4
			}
		}
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 2
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 2
			}
		}
		if = {
			limit = {
				th_incident_get_stage = {
					incident = $incident$
					stage = 1
				}
			}
			set_variable = {
				which = th_$incident$_points
				value = 1
			}
		}
		th_raise_incident_stage = {
			incident = $incident$
			stage = 1
		}
		clr_country_flag = th_incident_stage_timer
		set_country_flag = th_incident_stage_timer
	}
}

#Effect for the country, which refuses to investigate in the introduction event
th_refuse_investigating_incident = {
	add_prestige = -25
	hidden_effect = {
		clr_country_flag = th_incident_investigating
		if = {
			limit = {
				has_country_modifier = th_incident_investigator_modifier
			}
			remove_country_modifier = th_incident_investigator_modifier
		}
		random_country = {	
			limit = {
				th_incident_can_become_investigator = yes
			}	
			add_adm_power = -25
			th_incident_set_country_to_new_investigator = yes
		}
	}
}

#Change the investigation points
th_incident_change_points = {
	custom_tooltip = th_incident_change_points_$value$_tt
	hidden_effect = {
		trigger_switch = {
			on_trigger = has_global_flag
			th_current_incident_scarlet_mists_incident 			= { change_variable = { which = th_scarlet_mists_incident_points			value = $value$ } }
			th_current_incident_cherry_blossom_incident 		= { change_variable = { which = th_cherry_blossom_incident_points			value = $value$ } }
			th_current_incident_eternal_night_incident 			= { change_variable = { which = th_eternal_night_incident_points			value = $value$ } }
			th_current_incident_sixty_year_cycle_incident 		= { change_variable = { which = th_sixty_year_cycle_incident_points			value = $value$ } }
			th_current_incident_mountain_of_faith_incident 		= { change_variable = { which = th_mountain_of_faith_incident_points		value = $value$ } }
			th_current_incident_subterranean_animism_incident 	= { change_variable = { which = th_subterranean_animism_incident_points		value = $value$ } }
			th_current_incident_undefined_fantastic_incident 	= { change_variable = { which = th_undefined_fantastic_incident_points		value = $value$ } }
			th_current_incident_hisoutensoku_incident 			= { change_variable = { which = th_hisoutensoku_incident_points				value = $value$ } }
			th_current_incident_ten_desires_incident 			= { change_variable = { which = th_ten_desires_incident_points				value = $value$ } }
			th_current_incident_hopeless_masquerade_incident 	= { change_variable = { which = th_hopeless_masquerade_incident_points		value = $value$ } }
			th_current_incident_reversal_incident 				= { change_variable = { which = th_reversal_incident_points					value = $value$ } }
			th_current_incident_urban_legend_incident 			= { change_variable = { which = th_urban_legend_incident_points				value = $value$ } }
			th_current_incident_lunarian_incident 				= { change_variable = { which = th_lunarian_incident_points					value = $value$ } }
			th_current_incident_perfect_possession_incident 	= { change_variable = { which = th_perfect_possession_incident_points		value = $value$ } }
			th_current_incident_four_seasons_incident 			= { change_variable = { which = th_four_seasons_incident_points				value = $value$ } }
			th_current_incident_animal_realm_incident 			= { change_variable = { which = th_animal_realm_incident_points				value = $value$ } }
			th_current_incident_unconnected_marketeers_incident = { change_variable = { which = th_unconnected_marketeers_incident_points	value = $value$ } }
		}
	}
}

###GENERAL EFFECTS###

th_incident_cruel_decision = {	
	if = {
		limit = {
			OR = {
				ruler_has_personality = malevolent_personality
				ruler_has_personality = cruel_personality
			}
		}
		add_mil_power = 150
	}
	else = {
		add_mil_power = -75
	}
	if = {
		limit = {
			ruler_has_personality = kind_hearted_personality
		}
		remove_ruler_personality = kind_hearted_personality
		add_ruler_personality = cruel_personality 
	}
}

###EFFECTS FOR SNOW SPRING INCIDENT###

th_PCB_incident_reduce_winter_modifier = {
	custom_tooltip = th_PCB_incident_reduce_winter_modifier.tt
	if = {
		limit = {
			has_province_modifier = th_PCB_endless_winter
		}
		hidden_effect = {
			remove_province_modifier = th_PCB_endless_winter
			add_permanent_province_modifier = {
				name = th_PCB_permanent_blizzard
				duration = -1
				desc = th_until_end_of_incident_desc
			}
		}
	}
	else_if = {
		limit = {
			has_province_modifier = th_PCB_permanent_blizzard
		}
		hidden_effect = {
			remove_province_modifier = th_PCB_permanent_blizzard		
			add_permanent_province_modifier = {
				name = th_PCB_frozen_land
				duration = -1
				desc = th_until_end_of_incident_desc
			}
		}
	}
	else_if = {
		limit = {
			has_province_modifier = th_PCB_frozen_land
		}
		hidden_effect = {
			remove_province_modifier = th_PCB_frozen_land
			add_permanent_province_modifier = {
				name = th_PCB_howling_winds
				duration = -1
				desc = th_until_end_of_incident_desc
			}			
		}
	}
	else = {
		hidden_effect = {
			remove_province_modifier = th_PCB_howling_winds
		}
	}
}

###EFFECTS FOR REFORM CENTERS###
th_create_random_center_of_reform = {	
	random_owned_province = {
		limit = {
			superregion = $superregion$
		}
		if = {
			limit = {
				NOT = { religion = $religion$ }
			}
			change_religion = $religion$
		}
		add_reform_center = $religion$
		add_permanent_province_modifier = {
			name = "religious_zeal_at_conv"
			duration = 9000
		}
		add_permanent_province_modifier = {
			name = "th_center_of_reformation"
			duration = -1
		}
	}
}
